import os
import re
import sys
import glob
import argparse

class SubmissionSanitizer:
    """
    This is a simple Python script for cleaning up your submission files,
    especially image files or data files.
     
    The problem addressed can be summarized easily: after performing experiments
    for a paper, it might not be clear which results and visualizations actually
    make it into the paper. If you work like me, you might put a large part of your
    results into a repository (or data storage) and change the actual figures in
    the paper frequently before the deadline. As a result, your repository might
    hold a lot of data and image files which are not actually used in the final paper.

    Now, for uploading (or zipping) the paper to ArXiv, or making the LaTeX source
    available, you would like to delete all unused data and image files without
    going through the LaTeX source manually. For this case, there is
    `\RequirePackage{snapshot}` which, if added in the pre-amble, will create a
    `.deb` file listing all used external resources.

    Then, the script in this repository, `sanitize_submission.py` will go through
    this file and delete all other files not needed.

    Example: the image files of a paper are in directory `images/`, then the `.dep`
    file obtained after adding `\RequirePackage{snapshot}` in the pre-amble and
    compiling the paper contains entries as follows:

        *{file}   {./images/experiments/kitti/vae_occ_aml/15_long/results_1.png}{0000/00/00 v0.0}
        *{file}   {./images/experiments/kitti/vae_occ_aml/15_long_statistics/results_1.png}{0000/00/00 v0.0}

    These entries correspond to images used in the paper. Then,

        python sanitize_submission.py --mode=check --dep_file=paper.deb --asset_directory=images/ --extensions=png

    Will look for `.png` files in `paper.deb` and in the given asset directory. It will
    then list which files in the asset directory can be deleted as they do not appear in `paper.dep`.
    After confirming that everything looks fine, run

        python sanitize_submission.py --mode=delete --dep_file=paper.deb --asset_directory=images/ --extensions=png

    to perform deletion.
    
    If multiple dep-files are used, because figures are compiled in separate TeX
    files, these can be listed comma-separated and provided through `--dep_files`.
    
    Alternatively, glob-style pattern can be used, e.g. `--dep_files=*.dep` if
    additionally the `--glob` parameter is provided.
    """

    def __init__(self):
        """
        Constructor.
        
        :param args: command line arguments
        """
        
        parser = self.get_parser()
        self.options = parser.parse_args()
        self.options.extensions = self.options.extensions.split(',')
        self.options.extensions = [extension.strip() for extension in self.options.extensions]
        
        if self.options.glob:
            self.options.dep_files = glob.glob(self.options.dep_files)
        else:
            self.options.dep_files = self.options.dep_files.split(',')
            self.options.dep_files = [dep_file.strip() for dep_file in self.options.dep_files]
        
        print('Found %d DEP files.' % len(self.options.dep_files))
        
    def get_parser(self):
        """
        Get parser.
        
        :return: parser
        """
        
        parser = argparse.ArgumentParser(description='Submission sanitizer: sanitize images used in your LaTeX document and concentrate only on those actually neede -- for example for ArXiv.')
        parser.add_argument('--mode', type=str, default='delete', help='Operation modes: `delete` for deleting all unused files in asset_directory that are not found in dep_files; `check` as in `delete` but will only print results not perform the deletion.')
        parser.add_argument('--dep_files', type=str, help='Path to the DEP files generated by adding \RequirePackage{snapshot} in the pre-amble of your LaTeX document.')
        parser.add_argument('--glob', action='store_true', default=False, help='Whether to understand --dep_files as glob expression.')
        parser.add_argument('--asset_directory', type=str, help='The (relative) path to the directory holding the assets to sanitize; NOTE THAT DEPENDING ON THE OPERATION MODE, FILES WITHIN THIS DIRECTORY MIGHT BE DELETED!')
        parser.add_argument('--extensions', type=str, default='png', help='List of extensions to consider.')
        
        return parser
    
    def validate_options(self):
        """
        Validate options.
        """
        
        if self.options.mode != 'delete' and self.options.mode != 'check':
            print('The mode should be `delete` or `check`.')
            exit()
        for dep_file in self.options.dep_files:
            if not os.path.exists(dep_file):
                print('DEP file %s not found.' % dep_file)
                exit()
            if not os.path.isfile(dep_file):
                print('DEP file %s is not a file.' % dep_file)
                exit()
        if not os.path.exists(self.options.asset_directory):
            print('Asset directory %s not found.' % self.options.asset_directory)
            print('Still continuing as the asset directory might be relative to the .dep files\' directories.')
            #exit()
    
    def normalize_path(self, filepath):
        """
        Normalize a path.
        
        :param filepath: file path to normalize
        :return: normalized path
        """
        
        return os.path.normpath(os.path.abspath(filepath))
    
    def read_dep_files(self):
        """
        Read the DEP file, this file holds entries as follows (examples):
        
        *{application}{TeX}     {1990/03/25 v3.x}
        *{format} {LaTeX2e}     {2014/05/01 v2.e}
        *{class}  {scrbook}     {2013/12/19 v3.12}
        *{package}{scrkbase}    {2013/12/19 v3.12}
        *{package}{scrbase}     {2013/12/19 v3.12}
        *{package}{keyval}      {2014/05/08 v1.15}
        *{package}{scrlfile}    {2013/12/19 v3.12}
        *{package}{tocbasic}    {2013/12/19 v3.12}
        *{file}   {scrsize12pt.clo}{2013/12/19 v3.12}
        *{file}   {umsa.fd}     {2013/01/14 v3.01}
        *{file}   {umsb.fd}     {2013/01/14 v3.01}
        *{file}   {./images/./logo/logo.pdf}{0000/00/00 v0.0}
        *{file}   {./images/./logo/mpi_is.png}{0000/00/00 v0.0}
        *{file}   {assertion.tex}{0000/00/00 v0.0}
        
        :return: list of files referenced in DEP file
        """
        
        files = []
        
        for dep_file in self.options.dep_files:
            assert os.path.exists(dep_file), 'DEP file %s not found' % dep_file
        
            lines = []
            with open(dep_file, 'r') as f:
                lines = f.readlines()
                lines = [line.strip() for line in lines if line.strip() != '']
                lines = [line for line in lines if line[:7] == '*{file}']
                
            assert len(lines) > 0, 'DEP file is empty or could not be read!'
            
            for line in lines:
                path_search = re.search('.*\{(.*)\}.*\{(.*)\}.*\{(.*)\}.*', line, re.IGNORECASE)

                if path_search:
                    groups = path_search.groups()
                    assert len(groups) == 3, 'Could not parse DEP file.'

                    # normpath normalizes path for later comparison!
                    filepath = self.normalize_path(groups[1])
                    _, extension = os.path.splitext(filepath)
                    if extension[1:] in self.options.extensions:
                        files.append(filepath)
            
            print('Read %s.' % dep_file)
        
        return files
    
    def check_files(self, files):
        """
        Check the files referenced in DEP file.
        
        :param files: list of files from DEP file
        """
        
        for filepath in files:
            if not os.path.exists(filepath):
                print('File %s, found in DEP file, not found; did you check that your LaTeX file compiles?' % filepath)
        
    def read_asset_directory(self):
        """
        Read files in asset directory.
        
        :return: files in asset directory
        """
        
        files = []
        for root, directories, filenames in os.walk(self.options.asset_directory):
            for filename in filenames:
                filepath = os.path.join(root, filename)
                filepath = self.normalize_path(filepath)
                _, extension = os.path.splitext(filepath)
                if extension[1:] in self.options.extensions:
                    files.append(filepath)
        
        print('Found %d asset files.' % len(files))
        
        return files
        
    def run(self):
        """
        Run.
        """
        
        self.validate_options()
        
        dep_files = self.read_dep_files()
        self.check_files(dep_files)
        
        asset_files = self.read_asset_directory()
        for asset_file in asset_files:
            if not asset_file in dep_files:
                print('Deleting %s.' % asset_file)
                if self.options.mode == 'delete':
                    os.remove(asset_file)
            else:
                print('Keeping %s.' % asset_file)

if __name__ == '__main__':
    app = SubmissionSanitizer()
    app.run()
    
